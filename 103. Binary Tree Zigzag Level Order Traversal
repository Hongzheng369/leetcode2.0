class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(root, res, 0);
        return res;
    }
    
    private void dfs(TreeNode curr, List<List<Integer>> res, int level)
    {
        if(curr == null) return;
        
        if(res.size() <= level){
            List<Integer> newLevel = new LinkedList<>();
            res.add(newLevel);
        }
        
        List<Integer> collection  = res.get(level);
        if(level % 2 == 0) 
            collection.add(curr.val);
        else 
            collection.add(0, curr.val);
        
        dfs(curr.left, res, level + 1);
        dfs(curr.right, res, level + 1);
    }
}


class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) {return ans;}
        
        Queue<TreeNode> queue = new LinkedList<>();
        boolean reverse = false;
        queue.add(root);
        
        while(!queue.isEmpty()){
            List<Integer> level = new ArrayList<>();
            int len = queue.size();
            
            //put their value in "level"
            for(int i =0;i<len;i++){
                TreeNode node = queue.remove();
                level.add(node.val);
                
                if(node.left != null){
                    queue.add(node.left);
                }
                
                if(node.right != null){
                    queue.add(node.right);
                }
            }
            if(reverse){
                //reverseList(level);
                for(int i =1;i<level.size();i++){
                int move = level.remove(i);
                level.add(0,move);
                }
            }
            
            ans.add(level);
            reverse = !reverse;
        }
        return ans;
    }
    
    // reverse a list
    /*
    private void reverseList(List<Integer> list){
        if(list == null || list.size() <= 1){
            return;
            
        }
        
        int len = list.size();
        for(int i =1;i<len;i++){
            int move = list.remove(i);
            list.add(0,move);
        }
    }
    */
    
    
}
