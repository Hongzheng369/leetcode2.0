class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int[][] memo = new int[matrix.length][matrix[0].length];
        int result = 0;
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                result = Math.max(result,findLongest(matrix,i,j,Integer.MIN_VALUE,memo));
            }
        }
        return result;
    }
    public int findLongest(int[][] matrix, int i, int j, int pre, int[][] memo){
        if(i < 0 || j < 0 || i >= matrix.length || j >= matrix[0].length || matrix[i][j] <= pre)
            return 0;
    
        if(memo[i][j] > 0){
            return memo[i][j];
        }
        else{
            int curr = matrix[i][j];
            int tempMax = 0;
            tempMax = Math.max(tempMax, findLongest(matrix, i - 1, j, curr, memo));
            tempMax = Math.max(tempMax, findLongest(matrix, i + 1, j, curr, memo));
            tempMax = Math.max(tempMax, findLongest(matrix, i, j - 1, curr, memo));
            tempMax = Math.max(tempMax, findLongest(matrix, i, j + 1, curr, memo));
            memo[i][j] = tempMax + 1;
            return memo[i][j];
        }
    }
}
