public class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    private void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


…………^-^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Solution {
	public void nextPermutation(int[] nums) {
		boolean change = false;
		for (int i = nums.length - 2; i >= 0; i--) {
			if (change == true) {
				break;
			}
			if (nums[i] < nums[i + 1]) {
				for (int j = nums.length - 1; j > i; j--) {
					if (nums[j] > nums[i]) {
						change = true;
						int dum = nums[i];
						nums[i] = nums[j];
						nums[j] = dum;
						Arrays.sort(nums, i + 1, nums.length);
						break;
					}
				}
			}
		}
		if (change == false) {
			Arrays.sort(nums);
		}
	}
}
