
import java.util.*;

public class BuildOffice {
	public  int findBuild(int w,int h, int n){
		int count = 0;
		int[][] m = new int[w][h];
		for(int i = 0; i<w;i++){
			for(int j = 0 ;j<h;j++) {
				m[i][j] = 1;
				
			}
		}
		bt(m,0,n,count);
		return count;
	}
	
	
	
	private void bt(int[][] m, int i, int n,int count) {
		// TODO Auto-generated method stub
		if(i == n) {
			change(m,count);
			return;
		}
		bt(m,i+1,n,count);
		
	}
	private void change(int[][] matrix,int count) {
		// TODO Auto-generated method stub
		Queue<int[]> queue = new LinkedList<>(); 
	       int m = matrix.length, n = matrix[0].length; 
	       boolean[][] visited = new boolean[m][n]; 
	       for (int i = 0; i < m; i++) {
	            for (int j = 0; j < n; j++) { 
	                if (matrix[i][j] == 0) {
	                     queue.offer(new int[]{i, j});
	                     visited[i][j] = true; 
	                }
	            } 
	       }
	       
	       int[][] dir = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}}; 
	       while (!queue.isEmpty()) {
	       int[] cur = queue.poll(); 
	       for (int i = 0; i < 4; i++) {
	            int row = cur[0] + dir[i][0];
	            int col = cur[1] + dir[i][1];
	            if (row < 0 || row >= m || col < 0 || col >= n || visited[row][col]) {
	                continue; 
	            }
	            visited[row][col] = true;
	            matrix[row][col] = matrix[cur[0]][cur[1]] + 1; 
	            queue.offer(new int[]{row, col});
	       }
	    }
	       //int max = 0;
	       for (int i = 0; i < m; i++) {
	            for (int j = 0; j < n; j++) { 
	               if(matrix[i][j] >count) {
	            	   count = matrix[i][j];
	               }
	            } 
	       }
	       //System.out.println(Arrays.toString(matrix));
	    return ;
	}
	
	public static void main(String[] args) {
		BuildOffice bd = new BuildOffice();
		int a = bd.findBuild(3, 3, 1);
		System.out.println(a);
		//System.out.println(BuildOffice.findBuild(3,3,2));
	}
}
